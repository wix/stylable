import { Stylable } from '@stylable/core';
import { functionWarnings, processorWarnings, resolverWarnings } from '@stylable/core';
import { createMemoryFileSystemWithFiles as createFS } from '@stylable/e2e-test-kit';
import { expect } from 'chai';
import * as path from 'path';
import { build } from '../src';

const log = () => {
    /**/
};

describe('build stand alone', () => {
    it('should create modules and copy source css files', () => {
        const fs = createFS({
            '/main.st.css': `
                :import{
                    -st-from: "./components/comp.st.css";
                    -st-default:Comp;
                }
                .gaga{
                    -st-extends:Comp;
                    color:blue;
                }
            `,
            '/components/comp.st.css': `
                .baga{
                    color:red;
                }
            `
        });

        const stylable = new Stylable('/', fs as any, () => ({}));

        build({
            extension: '.st.css',
            fs: fs as any,
            stylable,
            outDir: 'lib',
            srcDir: '.',
            rootDir: path.resolve('/'),
            log
        });

        [
            '/lib/main.st.css',
            '/lib/main.st.css.js',
            '/lib/components/comp.st.css',
            '/lib/components/comp.st.css.js'
        ].forEach(p => {
            expect(fs.existsSync(path.resolve(p)), p).to.equal(true);
        });

        // assure no index file was generated by default
        expect(fs.existsSync(path.resolve('/lib/index.st.css')), '/lib/index.st.css').to.equal(
            false
        );
    });

    it('should report errors originating from stylable (process + transform)', async () => {
        const fs = createFS({
            '/comp.st.css': `
                :import {
                    -st-from: "./missing-file.st.css"
                    -st-default: OtherMissingComp;
                }

                .a {
                    -st-extends: MissingComp;
                    color: value(missingVar);
                }
            `
        });

        const stylable = new Stylable('/', fs as any, () => ({}));
        let reportedError = '';

        await build({
            extension: '.st.css',
            fs: fs as any,
            stylable,
            outDir: '.',
            srcDir: '.',
            rootDir: path.resolve('/'),
            log,
            diagnostics: (...args: string[]) => ([reportedError] = args)
        });

        expect(reportedError).to.contain(processorWarnings.CANNOT_RESOLVE_EXTEND('MissingComp'));
        expect(reportedError).to.contain(functionWarnings.UNKNOWN_VAR('missingVar'));
        expect(reportedError).to.contain(
            resolverWarnings.UNKNOWN_IMPORTED_FILE('./missing-file.st.css')
        );
    });
});

describe('useNamespaceReference', () => {
    it('should use "useNamespaceReference" to maintain a single namespace for all builds using it', async () => {
        const fs = createFS({
            '/src/main.st.css': ``,
            '/src/components/comp.st.css': ``
        });

        const stylable = new Stylable('/', fs, () => ({}));

        build({
            extension: '.st.css',
            fs,
            stylable,
            rootDir: path.resolve('/'),
            srcDir: 'src',
            outDir: 'cjs',
            log,
            useNamespaceReference: true
        });

        [
            '/cjs/main.st.css',
            '/cjs/main.st.css.js',
            '/cjs/components/comp.st.css',
            '/cjs/components/comp.st.css.js'
        ].forEach(p => {
            expect(fs.existsSync(path.resolve(p)), p).to.equal(true);
        });

        expect(fs.readFileSync(path.resolve('/cjs/main.st.css'), 'utf-8')).to.include(
            'st-namespace-reference="../src/main.st.css"'
        );

        build({
            extension: '.st.css',
            fs,
            stylable,
            rootDir: path.resolve('/'),
            srcDir: 'cjs',
            outDir: 'cjs2',
            log,
            useNamespaceReference: true
        });

        // check two builds using sourceNamespace are identical
        // compare two serializable js modules including their namespace
        expect(fs.readFileSync(path.resolve('/cjs/main.st.css.js'), 'utf-8')).to.equal(
            fs.readFileSync(path.resolve('/cjs2/main.st.css.js'), 'utf-8')
        );

        // assure no index file was generated by default
        expect(fs.existsSync(path.resolve('/lib/index.st.css')), '/lib/index.st.css').to.equal(
            false
        );
    });
});